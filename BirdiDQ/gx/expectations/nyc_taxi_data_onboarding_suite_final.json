{
  "data_asset_type": null,
  "expectation_suite_name": "nyc_taxi_data_onboarding_suite_final",
  "expectations": [
    {
      "expectation_type": "expect_table_row_count_to_be_between",
      "kwargs": {
        "max_value": 20000,
        "min_value": 20000
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_table_row_count_to_be_between(max_value=20000, min_value=20000)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Note:** The actual SQL query is generated dynamically by Great Expectations based on the expectation type and parameters.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {},
            "metric_name": "table.row_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_table_columns_to_match_set",
      "kwargs": {
        "column_set": [
          "tip_amount",
          "dropoff_location_id",
          "improvement_surcharge",
          "congestion_surcharge",
          "tolls_amount",
          "index",
          "rate_code_id",
          "extra",
          "pickup_location_id",
          "trip_distance",
          "vendor_id",
          "payment_type",
          "store_and_fwd_flag",
          "pickup",
          "mta_tax",
          "dropoff",
          "passenger_count",
          "total_amount",
          "fare_amount"
        ],
        "exact_match": null
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_table_columns_to_match_set(exact_match=None, column_set=['tip_amount', 'dropoff_location_id', 'improvement_surcharge', 'congestion_surcharge', 'tolls_amount', 'index', 'rate_code_id', 'extra', 'pickup_location_id', 'trip_distance', 'vendor_id', 'payment_type', 'store_and_fwd_flag', 'pickup', 'mta_tax', 'dropoff', 'passenger_count', 'total_amount', 'fare_amount'])\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Note:** The actual SQL query is generated dynamically by Great Expectations based on the expectation type and parameters.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "success_ratio": 1.0
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "index"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='index')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in index\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE index IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "passenger_count"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='passenger_count')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in passenger_count\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE passenger_count IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "trip_distance"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='trip_distance')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in trip_distance\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE trip_distance IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "store_and_fwd_flag"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='store_and_fwd_flag')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in store_and_fwd_flag\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE store_and_fwd_flag IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "store_and_fwd_flag"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "payment_type"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='payment_type')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in payment_type\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE payment_type IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "fare_amount"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='fare_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in fare_amount\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE fare_amount IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "extra"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='extra')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in extra\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE extra IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "mta_tax"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='mta_tax')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in mta_tax\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE mta_tax IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "tip_amount"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='tip_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in tip_amount\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE tip_amount IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "tolls_amount"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='tolls_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in tolls_amount\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE tolls_amount IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "improvement_surcharge"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='improvement_surcharge')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in improvement_surcharge\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE improvement_surcharge IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "total_amount"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='total_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in total_amount\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE total_amount IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "pickup"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='pickup')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in pickup\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE pickup IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "pickup"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_not_be_null",
      "kwargs": {
        "column": "dropoff"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_not_be_null(column='dropoff')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check for NULL values in dropoff\nSELECT COUNT(*) as null_count\nFROM {{table}}\nWHERE dropoff IS NULL;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "dropoff"
            },
            "metric_name": "column_values.nonnull.unexpected_count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "index",
        "max_value": 0,
        "min_value": 0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=0, column='index', strict_min=False, min_value=0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of index is in range\nSELECT MIN(index) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 0 AND 0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "index",
        "max_value": 9999,
        "min_value": 9999,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=9999, column='index', strict_min=False, min_value=9999, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of index is in range\nSELECT MAX(index) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 9999 AND 9999\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "index",
        "max_value": 9999,
        "min_value": 0,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=9999, column='index', strict_min=False, min_value=0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check index values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE index NOT BETWEEN 0 AND 9999;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "index"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "index"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "index",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              2499,
              2499
            ],
            [
              4999,
              4999
            ],
            [
              7499,
              7499
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[2499, 2499], [4999, 4999], [7499, 7499]]}, column='index')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: index\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "index",
        "max_value": 4999.5,
        "min_value": 4999.5,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=4999.5, column='index', strict_min=False, min_value=4999.5, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: index\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "index",
        "max_value": 4999.5,
        "min_value": 4999.5,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=4999.5, column='index', strict_min=False, min_value=4999.5, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of index is in range\nSELECT AVG(index) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 4999.5 AND 4999.5\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "index",
        "max_value": 2886.823503004102,
        "min_value": 2886.823503004102,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=2886.823503004102, column='index', strict_min=False, min_value=2886.823503004102, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: index\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "index"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 1,
        "min_value": 1,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=1, column='passenger_count', strict_min=False, min_value=1, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of passenger_count is in range\nSELECT MIN(passenger_count) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 1 AND 1\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 6,
        "min_value": 6,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=6, column='passenger_count', strict_min=False, min_value=6, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of passenger_count is in range\nSELECT MAX(passenger_count) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 6 AND 6\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 6,
        "min_value": 1,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=6, column='passenger_count', strict_min=False, min_value=1, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check passenger_count values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE passenger_count NOT BETWEEN 1 AND 6;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "passenger_count"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "passenger_count"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "passenger_count",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              1,
              1
            ],
            [
              1,
              1
            ],
            [
              2,
              2
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[1, 1], [1, 1], [2, 2]]}, column='passenger_count')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: passenger_count\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 1.0,
        "min_value": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=1.0, column='passenger_count', strict_min=False, min_value=1.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: passenger_count\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 1.5716,
        "min_value": 1.5716,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=1.5716, column='passenger_count', strict_min=False, min_value=1.5716, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of passenger_count is in range\nSELECT AVG(passenger_count) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 1.5716 AND 1.5716\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 1.1985596636227014,
        "min_value": 1.1985596636227014,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=1.1985596636227014, column='passenger_count', strict_min=False, min_value=1.1985596636227014, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: passenger_count\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "trip_distance",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=0.0, column='trip_distance', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of trip_distance is in range\nSELECT MIN(trip_distance) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 0.0 AND 0.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "trip_distance",
        "max_value": 57.95,
        "min_value": 57.95,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=57.95, column='trip_distance', strict_min=False, min_value=57.95, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of trip_distance is in range\nSELECT MAX(trip_distance) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 57.95 AND 57.95\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "trip_distance",
        "max_value": 57.95,
        "min_value": 0.0,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=57.95, column='trip_distance', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check trip_distance values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE trip_distance NOT BETWEEN 0.0 AND 57.95;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "trip_distance"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "trip_distance"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "trip_distance",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.9,
              0.9
            ],
            [
              1.53,
              1.53
            ],
            [
              2.79,
              2.79
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.9, 0.9], [1.53, 1.53], [2.79, 2.79]]}, column='trip_distance')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: trip_distance\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "trip_distance",
        "max_value": 1.53,
        "min_value": 1.53,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=1.53, column='trip_distance', strict_min=False, min_value=1.53, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: trip_distance\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "trip_distance",
        "max_value": 2.758991000000011,
        "min_value": 2.758991000000011,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=2.758991000000011, column='trip_distance', strict_min=False, min_value=2.758991000000011, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of trip_distance is in range\nSELECT AVG(trip_distance) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 2.758991000000011 AND 2.758991000000011\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "trip_distance",
        "max_value": 3.6383831166473124,
        "min_value": 3.6383831166473124,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=3.6383831166473124, column='trip_distance', strict_min=False, min_value=3.6383831166473124, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: trip_distance\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "trip_distance"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 1,
        "min_value": 1,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=1, column='payment_type', strict_min=False, min_value=1, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of payment_type is in range\nSELECT MIN(payment_type) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 1 AND 1\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 4,
        "min_value": 4,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=4, column='payment_type', strict_min=False, min_value=4, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of payment_type is in range\nSELECT MAX(payment_type) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 4 AND 4\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 4,
        "min_value": 1,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=4, column='payment_type', strict_min=False, min_value=1, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check payment_type values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE payment_type NOT BETWEEN 1 AND 4;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "payment_type"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "payment_type"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "payment_type",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              1,
              1
            ],
            [
              1,
              1
            ],
            [
              2,
              2
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[1, 1], [1, 1], [2, 2]]}, column='payment_type')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: payment_type\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 1.0,
        "min_value": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=1.0, column='payment_type', strict_min=False, min_value=1.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: payment_type\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 1.293,
        "min_value": 1.293,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=1.293, column='payment_type', strict_min=False, min_value=1.293, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of payment_type is in range\nSELECT AVG(payment_type) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 1.293 AND 1.293\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 0.47155287943761437,
        "min_value": 0.47155287943761437,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=0.47155287943761437, column='payment_type', strict_min=False, min_value=0.47155287943761437, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: payment_type\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "fare_amount",
        "max_value": -52.0,
        "min_value": -52.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=-52.0, column='fare_amount', strict_min=False, min_value=-52.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of fare_amount is in range\nSELECT MIN(fare_amount) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN -52.0 AND -52.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "fare_amount",
        "max_value": 3004.0,
        "min_value": 3004.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=3004.0, column='fare_amount', strict_min=False, min_value=3004.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of fare_amount is in range\nSELECT MAX(fare_amount) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 3004.0 AND 3004.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "fare_amount",
        "max_value": 3004.0,
        "min_value": -52.0,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=3004.0, column='fare_amount', strict_min=False, min_value=-52.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check fare_amount values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE fare_amount NOT BETWEEN -52.0 AND 3004.0;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "fare_amount"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "fare_amount"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "fare_amount",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              6.0,
              6.0
            ],
            [
              9.0,
              9.0
            ],
            [
              13.5,
              13.5
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[6.0, 6.0], [9.0, 9.0], [13.5, 13.5]]}, column='fare_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: fare_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "fare_amount",
        "max_value": 9.0,
        "min_value": 9.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=9.0, column='fare_amount', strict_min=False, min_value=9.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: fare_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "fare_amount",
        "max_value": 12.485031,
        "min_value": 12.485031,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=12.485031, column='fare_amount', strict_min=False, min_value=12.485031, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of fare_amount is in range\nSELECT AVG(fare_amount) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 12.485031 AND 12.485031\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "fare_amount",
        "max_value": 32.57098271966628,
        "min_value": 32.57098271966628,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=32.57098271966628, column='fare_amount', strict_min=False, min_value=32.57098271966628, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: fare_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "fare_amount"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": -36.71,
        "min_value": -36.71,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=-36.71, column='extra', strict_min=False, min_value=-36.71, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of extra is in range\nSELECT MIN(extra) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN -36.71 AND -36.71\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 4.5,
        "min_value": 4.5,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=4.5, column='extra', strict_min=False, min_value=4.5, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of extra is in range\nSELECT MAX(extra) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 4.5 AND 4.5\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 4.5,
        "min_value": -36.71,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=4.5, column='extra', strict_min=False, min_value=-36.71, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check extra values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE extra NOT BETWEEN -36.71 AND 4.5;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "extra"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "extra"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "extra",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ],
            [
              0.5,
              0.5
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.0, 0.0], [0.0, 0.0], [0.5, 0.5]]}, column='extra')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: extra\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=0.0, column='extra', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: extra\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 0.325509,
        "min_value": 0.325509,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=0.325509, column='extra', strict_min=False, min_value=0.325509, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of extra is in range\nSELECT AVG(extra) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 0.325509 AND 0.325509\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 0.5878244447093794,
        "min_value": 0.5878244447093794,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=0.5878244447093794, column='extra', strict_min=False, min_value=0.5878244447093794, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: extra\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": -0.5,
        "min_value": -0.5,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=-0.5, column='mta_tax', strict_min=False, min_value=-0.5, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of mta_tax is in range\nSELECT MIN(mta_tax) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN -0.5 AND -0.5\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 37.51,
        "min_value": 37.51,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=37.51, column='mta_tax', strict_min=False, min_value=37.51, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of mta_tax is in range\nSELECT MAX(mta_tax) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 37.51 AND 37.51\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 37.51,
        "min_value": -0.5,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=37.51, column='mta_tax', strict_min=False, min_value=-0.5, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check mta_tax values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE mta_tax NOT BETWEEN -0.5 AND 37.51;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "mta_tax"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "mta_tax"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "mta_tax",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.5,
              0.5
            ],
            [
              0.5,
              0.5
            ],
            [
              0.5,
              0.5
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5]]}, column='mta_tax')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: mta_tax\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 0.5,
        "min_value": 0.5,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=0.5, column='mta_tax', strict_min=False, min_value=0.5, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: mta_tax\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 0.501101,
        "min_value": 0.501101,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=0.501101, column='mta_tax', strict_min=False, min_value=0.501101, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of mta_tax is in range\nSELECT AVG(mta_tax) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 0.501101 AND 0.501101\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 0.37219581443806443,
        "min_value": 0.37219581443806443,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=0.37219581443806443, column='mta_tax', strict_min=False, min_value=0.37219581443806443, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: mta_tax\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "tip_amount",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=0.0, column='tip_amount', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of tip_amount is in range\nSELECT MIN(tip_amount) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 0.0 AND 0.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "tip_amount",
        "max_value": 75.0,
        "min_value": 75.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=75.0, column='tip_amount', strict_min=False, min_value=75.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of tip_amount is in range\nSELECT MAX(tip_amount) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 75.0 AND 75.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "tip_amount",
        "max_value": 75.0,
        "min_value": 0.0,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=75.0, column='tip_amount', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check tip_amount values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE tip_amount NOT BETWEEN 0.0 AND 75.0;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "tip_amount"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "tip_amount"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "tip_amount",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.0,
              0.0
            ],
            [
              1.4,
              1.4
            ],
            [
              2.34,
              2.34
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.0, 0.0], [1.4, 1.4], [2.34, 2.34]]}, column='tip_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: tip_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "tip_amount",
        "max_value": 1.4,
        "min_value": 1.4,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=1.4, column='tip_amount', strict_min=False, min_value=1.4, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: tip_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "tip_amount",
        "max_value": 1.8139030000000087,
        "min_value": 1.8139030000000087,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=1.8139030000000087, column='tip_amount', strict_min=False, min_value=1.8139030000000087, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of tip_amount is in range\nSELECT AVG(tip_amount) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 1.8139030000000087 AND 1.8139030000000087\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "tip_amount",
        "max_value": 2.390307422711516,
        "min_value": 2.390307422711516,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=2.390307422711516, column='tip_amount', strict_min=False, min_value=2.390307422711516, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: tip_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tip_amount"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=0.0, column='tolls_amount', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of tolls_amount is in range\nSELECT MIN(tolls_amount) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 0.0 AND 0.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 24.02,
        "min_value": 24.02,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=24.02, column='tolls_amount', strict_min=False, min_value=24.02, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of tolls_amount is in range\nSELECT MAX(tolls_amount) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 24.02 AND 24.02\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 24.02,
        "min_value": 0.0,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=24.02, column='tolls_amount', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check tolls_amount values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE tolls_amount NOT BETWEEN 0.0 AND 24.02;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "tolls_amount"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "tolls_amount"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "tolls_amount",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]}, column='tolls_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: tolls_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=0.0, column='tolls_amount', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: tolls_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 0.293242000000006,
        "min_value": 0.293242000000006,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=0.293242000000006, column='tolls_amount', strict_min=False, min_value=0.293242000000006, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of tolls_amount is in range\nSELECT AVG(tolls_amount) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 0.293242000000006 AND 0.293242000000006\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 1.4160492820571131,
        "min_value": 1.4160492820571131,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=1.4160492820571131, column='tolls_amount', strict_min=False, min_value=1.4160492820571131, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: tolls_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": -0.3,
        "min_value": -0.3,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=-0.3, column='improvement_surcharge', strict_min=False, min_value=-0.3, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of improvement_surcharge is in range\nSELECT MIN(improvement_surcharge) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN -0.3 AND -0.3\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 0.3,
        "min_value": 0.3,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=0.3, column='improvement_surcharge', strict_min=False, min_value=0.3, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of improvement_surcharge is in range\nSELECT MAX(improvement_surcharge) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 0.3 AND 0.3\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 0.3,
        "min_value": -0.3,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=0.3, column='improvement_surcharge', strict_min=False, min_value=-0.3, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check improvement_surcharge values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE improvement_surcharge NOT BETWEEN -0.3 AND 0.3;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "improvement_surcharge"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "improvement_surcharge"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "improvement_surcharge",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.3,
              0.3
            ],
            [
              0.3,
              0.3
            ],
            [
              0.3,
              0.3
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.3, 0.3], [0.3, 0.3], [0.3, 0.3]]}, column='improvement_surcharge')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: improvement_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 0.3,
        "min_value": 0.3,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=0.3, column='improvement_surcharge', strict_min=False, min_value=0.3, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: improvement_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 0.29949000000010856,
        "min_value": 0.29949000000010856,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=0.29949000000010856, column='improvement_surcharge', strict_min=False, min_value=0.29949000000010856, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of improvement_surcharge is in range\nSELECT AVG(improvement_surcharge) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 0.29949000000010856 AND 0.29949000000010856\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 0.016695922786473395,
        "min_value": 0.016695922786473395,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=0.016695922786473395, column='improvement_surcharge', strict_min=False, min_value=0.016695922786473395, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: improvement_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "total_amount",
        "max_value": -52.8,
        "min_value": -52.8,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=-52.8, column='total_amount', strict_min=False, min_value=-52.8, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of total_amount is in range\nSELECT MIN(total_amount) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN -52.8 AND -52.8\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "total_amount",
        "max_value": 3004.8,
        "min_value": 3004.8,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=3004.8, column='total_amount', strict_min=False, min_value=3004.8, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of total_amount is in range\nSELECT MAX(total_amount) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 3004.8 AND 3004.8\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "total_amount",
        "max_value": 3004.8,
        "min_value": -52.8,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=3004.8, column='total_amount', strict_min=False, min_value=-52.8, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check total_amount values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE total_amount NOT BETWEEN -52.8 AND 3004.8;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "total_amount"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "total_amount"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "total_amount",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              8.16,
              8.16
            ],
            [
              11.27,
              11.27
            ],
            [
              16.3,
              16.3
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[8.16, 8.16], [11.27, 11.27], [16.3, 16.3]]}, column='total_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: total_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "total_amount",
        "max_value": 11.27,
        "min_value": 11.27,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=11.27, column='total_amount', strict_min=False, min_value=11.27, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: total_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "total_amount",
        "max_value": 15.724230999997268,
        "min_value": 15.724230999997268,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=15.724230999997268, column='total_amount', strict_min=False, min_value=15.724230999997268, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of total_amount is in range\nSELECT AVG(total_amount) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 15.724230999997268 AND 15.724230999997268\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "total_amount",
        "max_value": 33.485131076774906,
        "min_value": 33.485131076774906,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=33.485131076774906, column='total_amount', strict_min=False, min_value=33.485131076774906, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: total_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "total_amount"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value=0.0, column='congestion_surcharge', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of congestion_surcharge is in range\nSELECT MIN(congestion_surcharge) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN 0.0 AND 0.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value=0.0, column='congestion_surcharge', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of congestion_surcharge is in range\nSELECT MAX(congestion_surcharge) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN 0.0 AND 0.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0,
        "min_value": 0.0,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value=0.0, column='congestion_surcharge', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check congestion_surcharge values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE congestion_surcharge NOT BETWEEN 0.0 AND 0.0;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "congestion_surcharge"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "congestion_surcharge"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_quantile_values_to_be_between",
      "kwargs": {
        "allow_relative_error": false,
        "column": "congestion_surcharge",
        "quantile_ranges": {
          "quantiles": [
            0.25,
            0.5,
            0.75
          ],
          "value_ranges": [
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ],
            [
              0.0,
              0.0
            ]
          ]
        }
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_quantile_values_to_be_between(allow_relative_error=False, quantile_ranges={'quantiles': [0.25, 0.5, 0.75], 'value_ranges': [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]}, column='congestion_surcharge')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_quantile_values_to_be_between\n-- Column: congestion_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.quantile_values",
            "metric_value_kwargs": {
              "allow_relative_error": false,
              "quantiles": [
                0.25,
                0.5,
                0.75
              ]
            }
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_median_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_median_to_be_between(max_value=0.0, column='congestion_surcharge', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_median_to_be_between\n-- Column: congestion_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.median",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_mean_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_mean_to_be_between(max_value=0.0, column='congestion_surcharge', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if mean of congestion_surcharge is in range\nSELECT AVG(congestion_surcharge) as mean_value\nFROM {{table}};\n-- Then verify: mean_value BETWEEN 0.0 AND 0.0\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.mean",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_stdev_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0,
        "min_value": 0.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_stdev_to_be_between(max_value=0.0, column='congestion_surcharge', strict_min=False, min_value=0.0, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_stdev_to_be_between\n-- Column: congestion_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.standard_deviation",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "pickup",
        "max_value": "2019-01-01T00:00:50",
        "min_value": "2019-01-01T00:00:50",
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value='2019-01-01T00:00:50', column='pickup', strict_min=False, min_value='2019-01-01T00:00:50', strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of pickup is in range\nSELECT MIN(pickup) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN '2019-01-01T00:00:50' AND '2019-01-01T00:00:50'\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "pickup"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "pickup",
        "max_value": "2019-01-31T23:59:11",
        "min_value": "2019-01-31T23:59:11",
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value='2019-01-31T23:59:11', column='pickup', strict_min=False, min_value='2019-01-31T23:59:11', strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of pickup is in range\nSELECT MAX(pickup) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN '2019-01-31T23:59:11' AND '2019-01-31T23:59:11'\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "pickup"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "pickup",
        "max_value": "2019-01-31T23:59:11",
        "min_value": "2019-01-01T00:00:50",
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value='2019-01-31T23:59:11', column='pickup', strict_min=False, min_value='2019-01-01T00:00:50', strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check pickup values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE pickup NOT BETWEEN '2019-01-01T00:00:50' AND '2019-01-31T23:59:11';\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "pickup"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "pickup"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_min_to_be_between",
      "kwargs": {
        "column": "dropoff",
        "max_value": "2019-01-01T00:26:46",
        "min_value": "2019-01-01T00:26:46",
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_min_to_be_between(max_value='2019-01-01T00:26:46', column='dropoff', strict_min=False, min_value='2019-01-01T00:26:46', strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if minimum value of dropoff is in range\nSELECT MIN(dropoff) as min_value\nFROM {{table}};\n-- Then verify: min_value BETWEEN '2019-01-01T00:26:46' AND '2019-01-01T00:26:46'\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "dropoff"
            },
            "metric_name": "column.min",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_max_to_be_between",
      "kwargs": {
        "column": "dropoff",
        "max_value": "2019-02-01T18:37:29",
        "min_value": "2019-02-01T18:37:29",
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_max_to_be_between(max_value='2019-02-01T18:37:29', column='dropoff', strict_min=False, min_value='2019-02-01T18:37:29', strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check if maximum value of dropoff is in range\nSELECT MAX(dropoff) as max_value\nFROM {{table}};\n-- Then verify: max_value BETWEEN '2019-02-01T18:37:29' AND '2019-02-01T18:37:29'\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "dropoff"
            },
            "metric_name": "column.max",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_between",
      "kwargs": {
        "column": "dropoff",
        "max_value": "2019-02-01T18:37:29",
        "min_value": "2019-01-01T00:26:46",
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_between(mostly=1.0, max_value='2019-02-01T18:37:29', column='dropoff', strict_min=False, min_value='2019-01-01T00:26:46', strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check dropoff values outside range\nSELECT COUNT(*) as out_of_range_count\nFROM {{table}}\nWHERE dropoff NOT BETWEEN '2019-01-01T00:26:46' AND '2019-02-01T18:37:29';\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "dropoff"
              },
              "metric_name": "column.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_values_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "dropoff"
              },
              "metric_name": "column.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_value_lengths_to_be_between",
      "kwargs": {
        "column": "store_and_fwd_flag",
        "max_value": 1,
        "min_value": 1,
        "mostly": 1.0,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_value_lengths_to_be_between(mostly=1.0, max_value=1, column='store_and_fwd_flag', strict_min=False, min_value=1, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_value_lengths_to_be_between\n-- Column: store_and_fwd_flag\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "column_max_length_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "store_and_fwd_flag"
              },
              "metric_name": "column_values.length.max",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          },
          "column_min_length_range_estimator": {
            "metric_configuration": {
              "domain_kwargs": {
                "column": "store_and_fwd_flag"
              },
              "metric_name": "column_values.length.min",
              "metric_value_kwargs": null
            },
            "num_batches": 1
          }
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_match_regex",
      "kwargs": {
        "column": "store_and_fwd_flag",
        "mostly": 1.0,
        "regex": "[A-Za-z0-9\\.,;:!?()\\\"'%\\-]+"
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_match_regex(regex='[A-Za-z0-9\\\\.,;:!?()\\\\\"\\'%\\\\-]+', mostly=1.0, column='store_and_fwd_flag')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check store_and_fwd_flag values NOT matching pattern\n-- Pattern: [A-Za-z0-9\\\\.,;:!?()\\\\\nSELECT store_and_fwd_flag, COUNT(*) as non_matching_count\nFROM {{table}}\nWHERE store_and_fwd_flag !~ '[A-Za-z0-9\\\\.,;:!?()\\\\'\nGROUP BY store_and_fwd_flag;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "evaluated_regexes": {
            "(?:25[0-5]|2[0-4]\\d|[01]\\d{2}|\\d{1,2})(?:.(?:25[0-5]|2[0-4]\\d|[01]\\d{2}|\\d{1,2})){3}": 0.0,
            "-?\\d+": 0.0,
            "-?\\d+(?:\\.\\d*)?": 0.0,
            "<\\/?(?:p|a|b|img)(?: \\/)?>": 0.0,
            "[A-Za-z0-9\\.,;:!?()\\\"'%\\-]+": 1.0,
            "\\b[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}-[0-5][0-9a-fA-F]{3}-[089ab][0-9a-fA-F]{3}-\\b[0-9a-fA-F]{12}\\b ": 0.0,
            "\\d+": 0.0,
            "\\s+$": 0.0,
            "^\\s+": 0.0,
            "https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,255}\\.[a-z]{2,6}\\b(?:[-a-zA-Z0-9@:%_\\+.~#()?&//=]*)": 0.0
          },
          "success_ratio": 1.0
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "passenger_count",
        "mostly": 1.0,
        "value_set": [
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[1, 2, 3, 4, 5, 6], column='passenger_count')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check passenger_count values NOT in allowed set\n-- Allowed values: [1, 2, 3, 4, 5, 6]\nSELECT passenger_count, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE passenger_count NOT IN [1, 2, 3, 4, 5, 6]\nGROUP BY passenger_count;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 6,
        "min_value": 6,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=6, column='passenger_count', strict_min=False, min_value=6, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: passenger_count\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "passenger_count",
        "max_value": 0.0003,
        "min_value": 0.0003,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0003, column='passenger_count', strict_min=False, min_value=0.0003, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: passenger_count\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "passenger_count"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "store_and_fwd_flag",
        "mostly": 1.0,
        "value_set": [
          "N",
          "Y"
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=['N', 'Y'], column='store_and_fwd_flag')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check store_and_fwd_flag values NOT in allowed set\n-- Allowed values: ['N', 'Y']\nSELECT store_and_fwd_flag, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE store_and_fwd_flag NOT IN ['N', 'Y']\nGROUP BY store_and_fwd_flag;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "store_and_fwd_flag"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "store_and_fwd_flag",
        "max_value": 2,
        "min_value": 2,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=2, column='store_and_fwd_flag', strict_min=False, min_value=2, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: store_and_fwd_flag\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "store_and_fwd_flag"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "store_and_fwd_flag",
        "max_value": 0.0001,
        "min_value": 0.0001,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0001, column='store_and_fwd_flag', strict_min=False, min_value=0.0001, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: store_and_fwd_flag\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "store_and_fwd_flag"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "payment_type",
        "mostly": 1.0,
        "value_set": [
          1,
          2,
          3,
          4
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[1, 2, 3, 4], column='payment_type')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check payment_type values NOT in allowed set\n-- Allowed values: [1, 2, 3, 4]\nSELECT payment_type, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE payment_type NOT IN [1, 2, 3, 4]\nGROUP BY payment_type;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 4,
        "min_value": 4,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=4, column='payment_type', strict_min=False, min_value=4, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: payment_type\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "payment_type",
        "max_value": 0.0002,
        "min_value": 0.0002,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0002, column='payment_type', strict_min=False, min_value=0.0002, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: payment_type\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "payment_type"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "extra",
        "mostly": 1.0,
        "value_set": [
          -0.5,
          0.0,
          0.5,
          0.8,
          1.0,
          4.5,
          -36.71,
          -1.0
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[-0.5, 0.0, 0.5, 0.8, 1.0, 4.5, -36.71, -1.0], column='extra')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check extra values NOT in allowed set\n-- Allowed values: [-0.5, 0.0, 0.5, 0.8, 1.0, 4.5, -36.71, -1.0]\nSELECT extra, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE extra NOT IN [-0.5, 0.0, 0.5, 0.8, 1.0, 4.5, -36.71, -1.0]\nGROUP BY extra;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 8,
        "min_value": 8,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=8, column='extra', strict_min=False, min_value=8, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: extra\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "extra",
        "max_value": 0.0004,
        "min_value": 0.0004,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0004, column='extra', strict_min=False, min_value=0.0004, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: extra\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "extra"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "mta_tax",
        "mostly": 1.0,
        "value_set": [
          -0.5,
          0.0,
          37.51,
          0.5
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[-0.5, 0.0, 37.51, 0.5], column='mta_tax')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check mta_tax values NOT in allowed set\n-- Allowed values: [-0.5, 0.0, 37.51, 0.5]\nSELECT mta_tax, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE mta_tax NOT IN [-0.5, 0.0, 37.51, 0.5]\nGROUP BY mta_tax;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 4,
        "min_value": 4,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=4, column='mta_tax', strict_min=False, min_value=4, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: mta_tax\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "mta_tax",
        "max_value": 0.0002,
        "min_value": 0.0002,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0002, column='mta_tax', strict_min=False, min_value=0.0002, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: mta_tax\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "mta_tax"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "tolls_amount",
        "mostly": 1.0,
        "value_set": [
          0.0,
          2.64,
          5.5,
          5.54,
          5.0,
          5.75,
          5.76,
          10.5,
          11.52,
          12.5,
          12.95,
          15.5,
          15.6,
          15.76,
          16.0,
          16.26,
          17.28,
          17.5,
          19.5,
          20.0,
          20.5,
          24.02
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[0.0, 2.64, 5.5, 5.54, 5.0, 5.75, 5.76, 10.5, 11.52, 12.5, 12.95, 15.5, 15.6, 15.76, 16.0, 16.26, 17.28, 17.5, 19.5, 20.0, 20.5, 24.02], column='tolls_amount')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check tolls_amount values NOT in allowed set\n-- Allowed values: [0.0, 2.64, 5.5, 5.54, 5.0, 5.75, 5.76, 10.5, 11.52, 12.5, 12.95, 15.5, 15.6, 15.76, 16.0, 16.26, 17.28, 17.5, 19.5, 20.0, 20.5, 24.02]\nSELECT tolls_amount, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE tolls_amount NOT IN [0.0, 2.64, 5.5, 5.54, 5.0, 5.75, 5.76, 10.5, 11.52, 12.5, 12.95, 15.5, 15.6, 15.76, 16.0, 16.26, 17.28, 17.5, 19.5, 20.0, 20.5, 24.02]\nGROUP BY tolls_amount;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 22,
        "min_value": 22,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=22, column='tolls_amount', strict_min=False, min_value=22, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: tolls_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "tolls_amount",
        "max_value": 0.0011,
        "min_value": 0.0011,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0011, column='tolls_amount', strict_min=False, min_value=0.0011, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: tolls_amount\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "tolls_amount"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "improvement_surcharge",
        "mostly": 1.0,
        "value_set": [
          -0.3,
          0.0,
          0.3
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[-0.3, 0.0, 0.3], column='improvement_surcharge')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check improvement_surcharge values NOT in allowed set\n-- Allowed values: [-0.3, 0.0, 0.3]\nSELECT improvement_surcharge, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE improvement_surcharge NOT IN [-0.3, 0.0, 0.3]\nGROUP BY improvement_surcharge;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 3,
        "min_value": 3,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=3, column='improvement_surcharge', strict_min=False, min_value=3, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: improvement_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "improvement_surcharge",
        "max_value": 0.00015,
        "min_value": 0.00015,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.00015, column='improvement_surcharge', strict_min=False, min_value=0.00015, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: improvement_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "improvement_surcharge"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_values_to_be_in_set",
      "kwargs": {
        "column": "congestion_surcharge",
        "mostly": 1.0,
        "value_set": [
          0.0
        ]
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_values_to_be_in_set(mostly=1.0, value_set=[0.0], column='congestion_surcharge')\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- Check congestion_surcharge values NOT in allowed set\n-- Allowed values: [0.0]\nSELECT congestion_surcharge, COUNT(*) as invalid_count\nFROM {{table}}\nWHERE congestion_surcharge NOT IN [0.0]\nGROUP BY congestion_surcharge;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.distinct_values",
            "metric_value_kwargs": null
          },
          "num_batches": 1,
          "parse_strings_as_datetimes": false
        }
      }
    },
    {
      "expectation_type": "expect_column_unique_value_count_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 1,
        "min_value": 1,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_unique_value_count_to_be_between(max_value=1, column='congestion_surcharge', strict_min=False, min_value=1, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_unique_value_count_to_be_between\n-- Column: congestion_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.distinct_values.count",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    },
    {
      "expectation_type": "expect_column_proportion_of_unique_values_to_be_between",
      "kwargs": {
        "column": "congestion_surcharge",
        "max_value": 0.0001361285053090117,
        "min_value": 0.0001361285053090117,
        "strict_max": false,
        "strict_min": false
      },
      "meta": {
        "notes": {
          "content": [
            "### \ud83d\udcdd Implementation Details\n\n**Python Code:**\n```python\nvalidator.expect_column_proportion_of_unique_values_to_be_between(max_value=0.0001361285053090117, column='congestion_surcharge', strict_min=False, min_value=0.0001361285053090117, strict_max=False)\n```\n\n**Execution Engine:** PostgreSQL (SQL) - Generated by Data Assistant\n\n\n**Approximate SQL Query:**\n```sql\n-- SQL query generated by Great Expectations\n-- Expectation type: expect_column_proportion_of_unique_values_to_be_between\n-- Column: congestion_surcharge\nSELECT COUNT(*) FROM {{table}} WHERE <expectation_logic>;\n```\n\n**Note:** This is a simplified example. Great Expectations generates optimized SQL with batching, sampling, and additional logic.\n"
          ],
          "format": "markdown"
        },
        "profiler_details": {
          "metric_configuration": {
            "domain_kwargs": {
              "column": "congestion_surcharge"
            },
            "metric_name": "column.unique_proportion",
            "metric_value_kwargs": null
          },
          "num_batches": 1
        }
      }
    }
  ],
  "ge_cloud_id": null,
  "meta": {
    "citations": [
      {
        "citation_date": "2025-10-05T18:01:17.409356Z",
        "comment": "Created by effective Rule-Based Profiler of OnboardingDataAssistant with the configuration included.\n"
      }
    ],
    "great_expectations_version": "0.18.22"
  }
}